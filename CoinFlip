pragma solidity ^0.4.2;
contract CoinFlip {

// Holds the final outcome. Odd for tails, even for heads. 
bool public result;

//Contract balance for rollover
uint balance;

// Current flip 
uint public commitPhaseEndTime;
uint public pot = 0;


struct player {
// originator or challenger
string name;
// Players choice hashed with their password 
bytes32 _betCommit;
// The revealed bet choice 
bool choice;
// true is revealed
bool betStatus;
}

// Map addresses to the player's bets
mapping(address => player) public players;

// Track the originator and the challengers
address originator;
address challenger;

event betBegin(
     uint commitPhaseEndTime
    ,uint potValue);
    
event betRevealed(
     string name
    ,bool betStatus);
    
event winner(
     string name
    ,uint payAmount);

// The bet amount of the contract is set by the originator. This person is originator.
constructor (
     uint256 _commitPhaseLengthInSeconds
    ,bytes32 _betCommit
    ) 
    public 
    payable 
    {
    require(msg.value > 0 && _commitPhaseLengthInSeconds > 60);
    originator = msg.sender;
    commitPhaseEndTime = now + _commitPhaseLengthInSeconds;
    players[msg.sender]._betCommit = _betCommit;
    pot += msg.value;
    players[msg.sender].name = "originator";
    emit betBegin(commitPhaseEndTime, pot);
}

// Fall back 
function(
    )
    public 
    payable
    {
    balance += msg.value;
}

// Accept the challengers bet commit, ensure the challenger has not already entered and the value matches the betAmount
function challengerCommitBet(
    bytes32 _betCommit
    ) 
    public 
    payable 
    {
    // ensure the challenger's bet matches the originator
    require(msg.value == pot && now < commitPhaseEndTime && challenger == 0);
    challenger = msg.sender;
    players[msg.sender].name = "challenger";
    pot += msg.value; 
    players[msg.sender]._betCommit = _betCommit; 
}


// Get the senders choice and password to verify their bet 
function revealBets(
     bool _choice
    ,string _password
    ) 
    public 
    {
    // Ensure we're after the commit phase 
    require(now > commitPhaseEndTime);
    
    if (players[msg.sender]._betCommit == keccak256(abi.encodePacked(_choice, _password))){
     players[msg.sender].choice = _choice;
     players[msg.sender].betStatus = true;
     emit betRevealed(players[msg.sender].name, players[msg.sender].betStatus);
    }
    
}

function revealResult(
    )
     public 
     {
     if( uint(keccak256( abi.encodePacked(players[challenger]._betCommit,players[originator]._betCommit) )) % 2 == 0) {
        result = true; 
     }else{
        result = false; 
     }
  
     // If both players get it right
    if(players[challenger].choice == result && players[originator].choice == result){
    payout(originator,2);
    payout(challenger,2);
    pot = 0;
    return;
    }
    
    // If the challenger gets it right
    if(players[challenger].choice == result){
    payout(challenger,1);
    pot = 0;
    return;  
    }
    
    // if the originator gets it right
    if(players[originator].choice == result){
    payout(originator,1);
    pot = 0;
    return;
    }
    //if both players get it wrong then add the pot to the contract balance
    balance += pot;
    pot = 0;
}

function payout(
     address payee
    ,uint split
    )
    private
    {
    uint payAmount = (pot / split);
    balance -= payAmount;
    payee.transfer(payAmount);
    emit winner(players[payee].name,payAmount);
    }

}
